<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<Version>6.0.0</Version>
		<Description>Await multiple tasks in parallel and get their return values with concise code.</Description>
		<PackageProjectUrl>https://github.com/Symbolinker/AwaitMultiple#readme</PackageProjectUrl>
		<RepositoryUrl>https://github.com/Symbolinker/AwaitMultiple#readme</RepositoryUrl>
		<PackageTags>async; await; multiple; tasks; task; return; value; values; parallel</PackageTags>
		<Copyright>Symbolinker</Copyright>
		<Authors>Symbolinker and other contributors</Authors>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<TargetFramework>netstandard2.0</TargetFramework>
		<LangVersion>latest</LangVersion>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<PackageIcon>Circle.png</PackageIcon>
		<PackageReleaseNotes>
			v1.0.1: improve exception handling.
			v1.0.2: improve handling cancellation exceptions and use `.ConfigureAwait(false)`.
			v1.0.3: use `.ConfigureAwait(false)` on all `await`s.
			v2.0.0: rename `await tasks(..)` to `await Tasks(..)` to allow using a `tasks` variable and the `Tasks` method in the same scope.
			v2.1.0: [new feature] await tasks with and without return value together.
			v2.1.1: delete unused method.
			v3.0.0: add optional parameter `continueOnCapturedContext` (with default `true`).
			v4.0.0: change the default exception handling behaviour to "throwing only the first exception" (as is usual in the C# language) and introduce the optional `exceptionOption` parameter that can be set to `ExceptionOption.Aggregate' for always getting an `AggregateException` if any task throws.
			v4.0.1: add `.ConfigureAwait(continueOnCapturedContext)` at missed spots + update readme.
			v5.0.0: delete the `continueOnCapturedContext` parameter and always use `false` inside the library.
			v6.0.0: improve instruction for `ExceptionOption.Aggregate` in readme and rename `global using static AwaitMultiple.__Await;` (using 2 underscores to prevent IntelliSense from advising to use the `__Await` class when typing `await` when having `ExceptionOption.Aggregate` via a using of its namespace at the top of the file).
		</PackageReleaseNotes>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\Circle.png" Pack="true" PackagePath="\" />
		<None Include="..\LICENSE.txt" Pack="true" PackagePath="\" />
		<None Include="..\README.md" Pack="true" PackagePath="\" />
	</ItemGroup>

</Project>
